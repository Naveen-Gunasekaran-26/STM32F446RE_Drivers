/*
 * stm32f446xx_i2c_driver.c
 *
 *  Created on: 12-Jul-2022
 *      Author: gn260
 */

#include "stm32f446xx.h"

uint16_t AHB_PrescalerValues[8] = {2,4,8,16,64,128,256,512};
uint8_t APB1_PrescalerValues[4] = {2,4,8,16};


static void I2C_ExecuteAddressPhase(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr, uint8_t ReadWriteBit);
static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle);
static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle);
static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle);



static void I2C_ExecuteAddressPhase(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr, uint8_t ReadWriteBit){

	SlaveAddr = SlaveAddr << 1; //SlaveAddr is SlaveAddress + r/nw bit

	if(ReadWriteBit){
		SlaveAddr |= 1; 	// Setting the r/nw bit for Read
	}
	else{
		SlaveAddr &= ~(1); 	// Clearing the r/nw bit for Write
	}

	pI2Cx->DR |= SlaveAddr;
}


static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle){

	uint32_t dummyRead;

	// Check if device is in master mode
	if( pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL) ){
		// Device is in master mode

		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX){
			if(pI2CHandle->RxLen == 1){
				// Disable the ACK
				I2C_ACKControl(pI2CHandle->pI2Cx, DISABLE);
				// Clear the ADDR (Dummy read SR1, SR2)
				dummyRead = pI2CHandle->pI2Cx->SR1;
				dummyRead = pI2CHandle->pI2Cx->SR2;
				(void)dummyRead;
			}
		}
	}
	else{
		// If Device is in slave mode (OR)
		// If not busy in RX, clear ADDR straight away
		// Clear the ADDR (Dummy read SR1, SR2)
		dummyRead = pI2CHandle->pI2Cx->SR1;
		dummyRead = pI2CHandle->pI2Cx->SR2;
		(void)dummyRead;
	}
}


static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle){

	if(pI2CHandle->TxLen > 0){

		// 1) Load data into DR
		pI2CHandle->pI2Cx->DR = *(pI2CHandle->pTxBuffer);

		// 2) Decrement TxLen
		pI2CHandle->TxLen--;

		// 3) Increment TxBuffer address
		pI2CHandle->pTxBuffer++;
	}
}


static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle){

	if(pI2CHandle->RxLen == 1){
		*(pI2CHandle->pRxBuffer) = pI2CHandle->pI2Cx->DR;
		pI2CHandle->RxLen--;
	}

	if(pI2CHandle->RxLen > 1){
		if(pI2CHandle->RxLen == 2){
			I2C_ACKControl(pI2CHandle->pI2Cx, DISABLE);
		}

		*(pI2CHandle->pRxBuffer) = pI2CHandle->pI2Cx->DR;
		pI2CHandle->RxLen--;
		pI2CHandle->pRxBuffer++;
	}

	if(pI2CHandle->RxLen == 0){
		// Close the I2C reception and notify the application

		// 1) Generate the STOP condition
		if(pI2CHandle->Sr != I2C_SR_ENABLE)
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
		// 2) Close I2C reception
		I2C_CloseReceiveData(pI2CHandle);
		// 3) Notify the application
		I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_RX_COMPLETE);
	}
}






// I2C Peripheral clock control
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi){

	if(EnOrDi == ENABLE){

		if(pI2Cx == I2C1)
			I2C1_PCLCK_EN();
		else if(pI2Cx == I2C2)
			I2C2_PCLCK_EN();
		else if(pI2Cx == I2C3)
			I2C3_PCLCK_EN();

	}
	else{

		if(pI2Cx == I2C1)
			I2C1_PCLCK_DI();
		else if(pI2Cx == I2C2)
			I2C2_PCLCK_DI();
		else if(pI2Cx == I2C3)
			I2C3_PCLCK_DI();

	}
}


uint32_t RCC_GetPLLOutputClock(){
	return 0;
}


uint32_t RCC_GetPCLK1Value(void){

	uint32_t pclk1, clksrc, systemClock, hpre, ahbPrescaler, ppre1, apb1Prescaler;

    //	Extracting SWS bits (2-3) from the RCC-CFGR register
	clksrc = (RCC->CFGR >> 2) & 0x3;
	if(clksrc == 0){
		// HSI is used as the system clock
		systemClock = 16000000;
	}
	else if(clksrc == 1){
		// HSE is used as the system clock
		systemClock = 8000000;
	}
	else if(clksrc == 2){
		// PLL is used as the system clock
		systemClock = RCC_GetPLLOutputClock();
	}

	// Extracting HPRE(to calculate AHB prescaler) bits (4-7) from the RCC-CFGR register
	hpre = (RCC->CFGR >> 4) & 0xF;
	if(hpre < 8)
		ahbPrescaler = 1;
	else
		ahbPrescaler = AHB_PrescalerValues[hpre-8];


	// Extracting PPRE1(to calculate APB1 prescaler) bits (10-12) from the RCC-CFGR register
	ppre1 = (RCC->CFGR >> 10) & 0x7;
	if(ppre1 < 4)
		apb1Prescaler = 1;
	else
		apb1Prescaler = APB1_PrescalerValues[ppre1-4];


	// Calculating the PCLK1
	pclk1 = (systemClock / ahbPrescaler) / apb1Prescaler;
	return pclk1;
}


// I2C peripheral initialization and de-initialization
void I2C_Init(I2C_Handle_t *pI2CHandle){

	// Enable the clock for the I2Cx peripheral
	I2C_PeriClockControl(pI2CHandle->pI2Cx, ENABLE);

	// Setting ACK control bit
	pI2CHandle->pI2Cx->CR1 |= pI2CHandle->I2C_Config.I2C_ACKControl << 10;

	// Configuring the FREQ field of CR2
	pI2CHandle->pI2Cx->CR2 |= (RCC_GetPCLK1Value()/1000000) & 0x3F;

	// Setting the device address
	pI2CHandle->pI2Cx->OAR1 |= (pI2CHandle->I2C_Config.I2C_DeviceAddress << 1);

	// Reserved Bit 14 in OAR1 should always be kept at 1 by software
	pI2CHandle->pI2Cx->OAR1 |= (1 << 14);

	// CCR calculation
	uint16_t ccrValue = 0;

	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM){

		// Standard mode
		/*
		 * In standard mode,
		 * T_high(SCL) = CCR * T_pclk1
		 * T_low(SCL) = CCR * T_pclk1
		 *
		 * T(SCL) = T_high + T_low
		 * T(SCL) = 2(CCR * T_pclk1)
		 * CCR = T(SCL) / (2 * T_pclk1)
		 *
		 * Writing CCR in terms of frequency,
		 * CCR = F_pclk1 / (2 * F(SCL))
		 */

		ccrValue = RCC_GetPCLK1Value() / (2 * pI2CHandle->I2C_Config.I2C_SCLSpeed);

		// CCR occupies 12 bits (0-11), thus we have to mask other bits
		pI2CHandle->pI2Cx->CCR |= (ccrValue & 0xFFF);
	}
	else{

		// Fast mode
		/*
		 * In fast mode,
		 * First the set F_S bit to 1 for fast mode
		 * Set the fast mode duty cycle
		 */

		pI2CHandle->pI2Cx->CCR |= (1 << 15);
		pI2CHandle->pI2Cx->CCR |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);

		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2){

			/*
			 * T_high(SCL) = CCR * T_pclk1
			 * T_low(SCL) = 2 * CCR * T_pclk1
			 *
			 * T(SCL) = T_high + T_low
			 * T(SCL) = 3(CCR * T_pclk1)
			 * CCR = T(SCL) / (3 * T_pclk1)
			 *
			 * Writing CCR in terms of frequency,
			 * CCR = F_pclk1 / (3 * F(SCL))
			 */
			ccrValue = RCC_GetPCLK1Value() / (3 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
			pI2CHandle->pI2Cx->CCR |= (ccrValue & 0xFFF);
		}
		else{

			/*
			 * T_high(SCL) = 9 * CCR * T_pclk1
			 * T_low(SCL) = 16 * CCR * T_pclk1
			 *
			 * T(SCL) = T_high + T_low
			 * T(SCL) = 25(CCR * T_pclk1)
			 * CCR = T(SCL) / (25 * T_pclk1)
			 *
			 * Writing CCR in terms of frequency,
			 * CCR = F_pclk1 / (25 * F(SCL))
			 */
			ccrValue = RCC_GetPCLK1Value() / (25 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
			pI2CHandle->pI2Cx->CCR |= (ccrValue & 0xFFF);
		}
	}


	// TRISE configuration
	uint8_t TRise;

	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM){
		// Standard mode
		TRise = (RCC_GetPCLK1Value() / 1000000) + 1;
	}
	else{
		// Fast mode
		TRise = ( (RCC_GetPCLK1Value() * 300) / 1000000) + 1;
	}

	pI2CHandle->pI2Cx->TRISE |= (TRise & 0x3F);
}


void I2C_DeInit(I2C_RegDef_t *pI2Cx){

	if(pI2Cx == I2C1)
		I2C1_REG_RESET();
	else if(pI2Cx == I2C2)
		I2C2_REG_RESET();
	else if(pI2Cx == I2C3)
		I2C3_REG_RESET();
}



// Data send and receive
void I2C_MasterSendData(I2C_Handle_t *pI2CHandle, uint8_t *pTxbuffer, uint32_t Len, uint8_t SlaveAddr, uint8_t Sr){

	// 1) Generate the start condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);

	// 2) Confirm that start generation is completed by checking the SB flag in the SR1
	// Note: Until SB is cleared, SCL will be stretched (pulled to LOW)
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB));

	// 3) Send the address of the slave with r/nw bit set to 0 for write (total 8 bits)
	I2C_ExecuteAddressPhase(pI2CHandle->pI2Cx, SlaveAddr, I2C_ADDRESS_PHASE_WRITE);

	// 4) Confirm that the address phase is completed by checking the ADDR flag in the SR1
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR));

	// 5) Clear the ADDR flag according to its software sequence
	// NOTE: Until ADDR is cleared, SCL will be stretched (pulled to LOW)
	I2C_ClearADDRFlag(pI2CHandle);

	// 6) Send data until Len becomes 0
	while(Len > 0){

		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE)); // Wait till TXE is set
		pI2CHandle->pI2Cx->DR |= *pTxbuffer;
		pTxbuffer++;
		Len--;
	}

	// 7) When Len becomes 0, wait for TXE=1 and BTF=1 before generating the STOP condition
	// Note: TXE=1, BTF=1 means both SR and DR are empty and next transmission should begin
	// 		 When BTF=1, SCL will be stretched (pulled to LOW)
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE));
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_BTF));


	// 8) Generate the STOP condition and master need not to wait for the completion of the start condition
	// NOTE: Generating the STOP condition automatically clears the BTF
	if(Sr != I2C_SR_ENABLE)
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);

}



void I2C_MasterReceiveData(I2C_Handle_t *pI2CHandle, uint8_t *pRxbuffer, uint32_t Len, uint8_t SlaveAddr, uint8_t Sr){

	// 1) Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);

	// 2) Confirm the START condition is generated by checking the SB flag in the SR1
	// Note: Until SB is cleared, SCL will be stretched (pulled to LOW)
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB));

	// 3) Send the address of the slave with r/nw bit set to 1 for read (total 8 bits)
	I2C_ExecuteAddressPhase(pI2CHandle->pI2Cx, SlaveAddr, I2C_ADDRESS_PHASE_READ);

	// 4) Wait until address phase is completed by checking the ADDR flag in the SR1
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR));

	// Procedure to read from slave when Len = 1
	if(Len == 1){

		// Disable ACK
		I2C_ACKControl(pI2CHandle->pI2Cx, DISABLE);

		// Clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle);

		// Wait until RXNE becomes 1
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_RXNE));

		// Generate the STOP condition
		if(Sr != I2C_SR_ENABLE)
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);

		// Read data into buffer
		*pRxbuffer = pI2CHandle->pI2Cx->DR;

	}


	// Procedure to read from slave when Len > 1
	if(Len > 1){

		// Clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle);

		// Read the data until Len becomes 0
		for(uint32_t i=Len; i>0; i--){

			// Wait until RXNE becomes 1
			while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_RXNE));

			// if it is the last 2 bytes
			if(i == 2){

				// Clear the ACK bit
				I2C_ACKControl(pI2CHandle->pI2Cx, DISABLE);

				// Generate the STOP condition
				if(Sr != I2C_SR_ENABLE)
					I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
			}

			// Read the data from data register into buffer
			*pRxbuffer = pI2CHandle->pI2Cx->DR;

			// Increment the buffer address
			pRxbuffer++;
		}
	}

	// Re-enable the ACK bit if ACK was enabled before entering this function
	if(pI2CHandle->I2C_Config.I2C_ACKControl == ENABLE){
		I2C_ACKControl(pI2CHandle->pI2Cx, ENABLE);
	}
}


uint8_t I2C_MasterSendDataInterrupt(I2C_Handle_t *pI2CHandle, uint8_t *pTxbuffer, uint32_t Len, uint8_t SlaveAddr, uint8_t Sr){

	uint8_t busyState = pI2CHandle->TxRxState;

	if( (busyState != I2C_BUSY_IN_TX) && (busyState != I2C_BUSY_IN_RX) ){

		pI2CHandle->pTxBuffer = pTxbuffer;
		pI2CHandle->TxLen = Len;
		pI2CHandle->TxRxState = I2C_BUSY_IN_TX;
		pI2CHandle->DeviceAddress = SlaveAddr;
		pI2CHandle->Sr = Sr;

		// Implement code to generate START condition
		I2C_GenerateStartCondition(pI2CHandle->pI2Cx);

		// Implement code to enable ITBUFEN control bit
		pI2CHandle->pI2Cx->CR2 |= (1 << I2C_CR2_ITBUFEN);

		// Implement code to enable ITEVTEN control bit
		pI2CHandle->pI2Cx->CR2 |= (1 << I2C_CR2_ITEVTEN);

		// Implement code to enable ITERREN control bit
		pI2CHandle->pI2Cx->CR2 |= (1 << I2C_CR2_ITERREN);


	}

	return busyState;
}


uint8_t I2C_MasterReceiveDataInterrupt(I2C_Handle_t *pI2CHandle, uint8_t *pRxbuffer, uint32_t Len, uint8_t SlaveAddr, uint8_t Sr){

	uint8_t busyState = pI2CHandle->TxRxState;

	if( (busyState != I2C_BUSY_IN_TX) && (busyState != I2C_BUSY_IN_RX) ){

		pI2CHandle->pRxBuffer = pRxbuffer;
		pI2CHandle->RxLen = Len;
		pI2CHandle->TxRxState = I2C_BUSY_IN_RX;
		pI2CHandle->DeviceAddress = SlaveAddr;
		pI2CHandle->Sr = Sr;

		// Implement code to generate START condition
		I2C_GenerateStartCondition(pI2CHandle->pI2Cx);

		// Implement code to enable ITBUFEN control bit
		pI2CHandle->pI2Cx->CR2 |= (1 << I2C_CR2_ITBUFEN);

		// Implement code to enable ITEVTEN control bit
		pI2CHandle->pI2Cx->CR2 |= (1 << I2C_CR2_ITEVTEN);

		// Implement code to enable ITERREN control bit
		pI2CHandle->pI2Cx->CR2 |= (1 << I2C_CR2_ITERREN);


	}

	return busyState;

}



// IRQ Configuration and ISR Handling
void I2C_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnOrDi){

	if(EnOrDi == ENABLE){

		if(IRQNumber < 32){

			// Set ISER0 Register in Processor
			*NVIC_ISER0 |= (1 << IRQNumber);
		}
		else if(IRQNumber >= 32 && IRQNumber < 64){

			// Set ISER1 Register in Processor
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
		}
		else if(IRQNumber >= 64 && IRQNumber < 96){

			// Set ISER2 Register in Processor
			*NVIC_ISER2 |= (1 << (IRQNumber % 64));
		}

	}
	else{

		if(IRQNumber < 32){

			// Set ICER0 Register in Processor
			*NVIC_ICER0 |= (1 << IRQNumber);
		}
		else if(IRQNumber >= 32 && IRQNumber < 64){

			// Set ICER1 Register in Processor
			*NVIC_ICER1 |= (1 << (IRQNumber % 32));
		}
		else if(IRQNumber >= 64 && IRQNumber < 96){

			// Set ICER2 Register in Processor
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
		}
	}
}


void I2C_IRQPriorityConfig(uint8_t IRQNumber, uint8_t IRQPriority){

	uint8_t IprxRegNum 			= IRQNumber / 4;
	uint8_t IprxRegSectionNum 	= IRQNumber % 4;

	*(NVIC_IPR_BASEADDR + IprxRegNum) |= IRQPriority << ((8 * IprxRegSectionNum) + NUM_OF_NON_IMPLMNTD_LOW_ORD_BITS_IN_PRIOR_REG);
}



void I2C_EV_IRQHandling(I2C_Handle_t *pI2CHandle){

	// Interrupt handling for both master and slave mode of a device

	uint32_t bit1State, bit2State, bit3State;
	bit1State = (pI2CHandle->pI2Cx->CR2 & (1 << I2C_CR2_ITEVTEN));
	bit2State = (pI2CHandle->pI2Cx->CR2 & (1 << I2C_CR2_ITBUFEN));

	// 1) Handle for interrupt generated by SB event
	// Note: SB flag is only applicable in master mode
	bit3State = (pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_SB));
	if( bit1State && bit3State ){

		// The interrupt is generated because of SB event
		// This block will only be executed in master mode and not in slave mode
		// In slave mode, the flag SB is always 0

		// Executing the address phase
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX)
			I2C_ExecuteAddressPhase(pI2CHandle->pI2Cx, pI2CHandle->DeviceAddress, I2C_ADDRESS_PHASE_WRITE);
		else if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
			I2C_ExecuteAddressPhase(pI2CHandle->pI2Cx, pI2CHandle->DeviceAddress, I2C_ADDRESS_PHASE_READ);
	}


	// 2) Handle for interrupt generated by ADDR event
	// Note: In master mode, address is sent
	//		 In slave mode, address matched with own address
	bit3State = (pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_ADDR));
	if( bit1State && bit3State ){

		// ADDR flag is set
		// Clear it manually in software
		I2C_ClearADDRFlag(pI2CHandle);
	}

	// 3) Handle for interrupt generated by BTF (Byte Transfer Finished) event
	bit3State = (pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_BTF));
	if( bit1State && bit3State ){

		// BTF flag is set
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX){

			// Confirming if TXE bit is also set along with BTF bit
			// i.e TXE==1 && BTF==1
			if(pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_TxE)){

				// Confirm if all the bytes have been transmitted before closing the transmission
				if(pI2CHandle->TxLen == 0){

					// 1) Generate the STOP condition
					if(pI2CHandle->Sr != I2C_SR_ENABLE) // Checking if I2C repeated start is disabled
						I2C_GenerateStopCondition(pI2CHandle->pI2Cx);

					// 2) Reset all the member elements of the handle structure
					I2C_CloseSendData(pI2CHandle);

					// 3) Notify application about completion of transmission
					I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_TX_COMPLETE);

				}
			}
		}

		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX){
			// Nothing to do in reception
		}
	}

	// 4) Handle for interrupt generated by STOPF event
	// Note: Stop detection flag is applicable only slave mode.
	// 		 For master, this flag will never be set.
	// The below code block will not be executed by the master since STOPF will not be set in master mode
	bit3State = (pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_STOPF));
	if( bit1State && bit3State ){

		// STOPF flag is set
		// To clear the STOPF flag
		// 1) Read from SR1
			// Dummy read already made in the above statement
			// bit3State = (pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_STOPF));

		// 2) Write to CR1
		pI2CHandle->pI2Cx->CR1 |= 0; //This is a dummy write; Register's contents are not modified

		// 3) Notify application about detection of STOP event
		I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_STOP);

	}

	// 5) Handle for interrupt generated by TXE event
	bit3State = (pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_TxE));
	if( bit1State && bit2State && bit3State ){

		// Check if the device is in master mode
		if( pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL) ){

			// TXE flag is set
			// We have to do data transmission
			if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX){
				I2C_MasterHandleTXEInterrupt(pI2CHandle);
			}
		}
	}

	// 6) Handle for interrupt generated by RXNE event
	bit3State = (pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_RxNE));
	if( bit1State && bit2State && bit3State ){

		// RXNE flag is set
		// We have to do data reception

		// Check if the device is in master mode
		if( pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL) ){
			if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX){
				I2C_MasterHandleRXNEInterrupt(pI2CHandle);
			}
		}

	}
}


void I2C_ER_IRQHandling(I2C_Handle_t *pI2CHandle){

	uint32_t bit1State, bit2State;

	// ITERREN bit state in CR2
	bit1State = pI2CHandle->pI2Cx->CR2 & (1 << I2C_CR2_ITERREN);

	// Checking for bus error
	// BERR bit state in SR1
	bit2State = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_BERR);
	if(bit1State && bit2State){
		// Bus error has occurred
		// Clear the bus error flag
		pI2CHandle->pI2Cx->SR1 &= ~(1 << I2C_SR1_BERR);

		// Notify application about the error
		I2C_ApplicationEventCallback(pI2CHandle, I2C_ERROR_BERR);
	}

	// Checking for arbitration lost error
	// ARLO bit state in SR1
	bit2State = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_ARLO);
	if(bit1State && bit2State){
		// Arbitration lost error has occurred
		// Clear the Arbitration lost error flag
		pI2CHandle->pI2Cx->SR1 &= ~(1 << I2C_SR1_ARLO);

		// Notify application about the error
		I2C_ApplicationEventCallback(pI2CHandle, I2C_ERROR_ARLO);
	}

	// Checking for ACK failure error
	// AF bit state in SR1
	bit2State = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_AF);
	if(bit1State && bit2State){
		// ACK failure error has occurred
		// Clear the ACK failure error flag
		pI2CHandle->pI2Cx->SR1 &= ~(1 << I2C_SR1_AF);

		// Notify application about the error
		I2C_ApplicationEventCallback(pI2CHandle, I2C_ERROR_AF);
	}

	// Checking for Overrun/Underrun error
	// OVR bit state in SR1
	bit2State = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_OVR);
	if(bit1State && bit2State){
		// Overrun/Underrun error has occurred
		// Clear the Overrun/Underrun error flag
		pI2CHandle->pI2Cx->SR1 &= ~(1 << I2C_SR1_OVR);

		// Notify application about the error
		I2C_ApplicationEventCallback(pI2CHandle, I2C_ERROR_OVR);
	}

	// Checking for Timeout error
	// OVR bit state in SR1
	bit2State = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_TIMEOUT);
	if(bit1State && bit2State){
		// Timeout error has occurred
		// Clear the Timeout error flag
		pI2CHandle->pI2Cx->SR1 &= ~(1 << I2C_SR1_TIMEOUT);

		// Notify application about the error
		I2C_ApplicationEventCallback(pI2CHandle, I2C_ERROR_TIMEOUT);
	}
}



// Other I2C Peripheral APIs
uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx, uint32_t FlagName){

	if(pI2Cx->SR1 & FlagName)
		return FLAG_SET;
	return FLAG_UNSET;
}


void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi){

	if(EnOrDi == ENABLE)
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);

	pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
}


void I2C_ACKControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi){

	if(EnOrDi == ENABLE){
		// Enable ACK
		pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
	}
	else{
		// Disable ACK
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
	}
}


void I2C_CloseSendData(I2C_Handle_t *pI2CHandle){

	// Clear ITBUFEN bit
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);

	// Clear ITEVTEN bit
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);

	pI2CHandle->TxRxState = I2C_READY;
	pI2CHandle->pTxBuffer = NULL;
	pI2CHandle->TxLen = 0;
}


void I2C_CloseReceiveData(I2C_Handle_t *pI2CHandle){

	// Clear ITBUFEN bit
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);

	// Clear ITEVTEN bit
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);

	pI2CHandle->TxRxState = I2C_READY;
	pI2CHandle->pRxBuffer = NULL;
	pI2CHandle->RxLen = 0;
	pI2CHandle->RxSize = 0;

	if(pI2CHandle->I2C_Config.I2C_ACKControl == I2C_ACK_ENABLE)
		I2C_ACKControl(pI2CHandle->pI2Cx, ENABLE);
}


// Application callback
void I2C_ApplicationEventCallback(I2C_Handle_t *pI2CHandle, uint8_t ApplicationEvent);


