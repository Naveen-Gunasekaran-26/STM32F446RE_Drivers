/*
 * stm32f446xx_usart_driver.c
 *
 *  Created on: 17-Jul-2022
 *      Author: gn260
 */

#include "stm32f446xx_usart_driver.h"




// USART Peripheral clock control
void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnOrDi){

	if(EnOrDi == ENABLE){
		if(pUSARTx == USART1)
			USART1_PCLCK_EN();
		else if(pUSARTx == USART2)
			USART2_PCLCK_EN();
		else if(pUSARTx == USART3)
			USART3_PCLCK_EN();
		else if(pUSARTx == USART6)
			USART6_PCLCK_EN();
	}
	else{
		if(pUSARTx == USART1)
			USART1_PCLCK_DI();
		else if(pUSARTx == USART2)
			USART2_PCLCK_DI();
		else if(pUSARTx == USART3)
			USART3_PCLCK_DI();
		else if(pUSARTx == USART6)
			USART6_PCLCK_DI();
	}
}


// USART peripheral initialization and de-initialization
void USART_Init(USART_Handle_t *pUSARTHandle){

	// Configuration of CR1
	// Enable the Clock for given USART peripheral
	 USART_PeriClockControl(pUSARTx, ENABLE);

	//Enable USART Tx and Rx engines according to the USART_Mode configuration item
	if ( pUSARTHandle->USART_Config.USART_Mode == USART_MODE_RX_ONLY)
	{
		// Enable the Receiver bit field
		pUSARTx->pUSARTx->CR1 |= (1 << USART_CR1_RE);
	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TX_ONLY)
	{
		// Enable the Transmitter bit field
		pUSARTx->pUSARTx->CR1 |= ( 1 << USART_CR1_TE);

	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TX_RX)
	{
		// Enable both Transmitter and Receiver bit fields
		pUSARTx->pUSARTx->CR1 |= ( (1 << USART_CR1_TE) | (1 << USART_CR1_RE) );
	}

    // Configure the Word length
	pUSARTx->pUSARTx->CR1 |= pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M;


    //Configuration of parity control bit fields
	if ( pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_ENABLE_EVEN)
	{
		// Enable the parity control bit
		pUSARTx->pUSARTx->CR1 |= (1 << USART_CR1_PCE);

		// Enable EVEN parity
	    pUSARTx->pUSARTx->CR1 &= ~(1 << USART_CR1_PS);

	}else if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_ENABLE_ODD )
	{
		// Enable the parity control
	    pUSARTx->pUSARTx->CR1 |= (1 << USART_CR1_PCE);

	    // Enable ODD parity
	    pUSARTx->pUSARTx->CR1 |= (1 << USART_CR1_PS);

	}


	// Configuration of CR2
	// Configure the number of stop bits inserted during USART frame transmission
	pUSARTx->pUSARTx->CR2 |= pUSARTHandle->USART_Config.USART_NoOfStopBits << USART_CR2_STOP;


	// Configuration of CR3
	// Configuration of USART hardware flow control
	if ( pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS)
	{
		// Enable CTS flow control
		pUSARTx->pUSARTx->CR3 |= (1 << USART_CR3_CTSE);


	}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS)
	{
		// Enable RTS flow control
		pUSARTx->pUSARTx->CR3 |= (1 << USART_CR3_RTSE);

	}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS)
	{
		// Enable both CTS and RTS Flow control
		pUSARTx->pUSARTx->CR3 |= ( (1 << USART_CR3_CTSE) | (1 << USART_CR3_RTSE) );
	}

	//Configuration of BRR(Baud-Rate Register)

}


void USART_DeInit(USART_RegDef_t *pUSARTx);


// Data send and receive
void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len){

	uint16_t *pdata;
   // Loop over until "Len" number of bytes are transferred
	for(uint32_t i = 0 ; i < Len; i++)
	{
		// Implement the code to wait until TXE flag is set in the SR
		while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx, USART_FLAG_TXE));

         // Check the USART_WordLength item for 9BIT or 8BIT in a frame
		if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
		{
			// if 9BIT, load the DR with 2bytes masking the bits other than first 9 bits
			pdata = (uint16_t*) pTxBuffer;
			pUSARTHandle->pUSARTx->DR = (*pdata & (uint16_t)0x01FF);

			// Check for USART_ParityControl
			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
			{
				// No parity is used in this transfer. so, 9bits of user data will be sent
				// Implement the code to increment pTxBuffer twice
				pTxBuffer++;
				pTxBuffer++;
			}
			else
			{
				// Parity bit is used in this transfer . so , 8bits of user data will be sent
				// The 9th bit will be replaced by parity bit by the hardware
				pTxBuffer++;
			}
		}
		else
		{
			//This is 8bit data transfer
			pUSARTHandle->pUSARTx->DR = (*pTxBuffer  & (uint8_t)0xFF);

			//Implement the code to increment the buffer address
			pTxBuffer++;
		}
	}

	//Implement the code to wait till TC flag is set in the SR
	while( ! USART_GetFlagStatus(pUSARTHandle->pUSARTx, USART_FLAG_TC));
}


void USART_ReceiveData(USART_Handle_t *pUSARTHandle, uint8_t *pRxBuffer, uint32_t Len){

	// Loop over until "Len" number of bytes are transferred
		for(uint32_t i = 0 ; i < Len; i++)
		{
			// Implement the code to wait until RXNE flag is set in the SR
			while( ! USART_GetFlagStatus(pUSARTHandle->pUSARTx, USART_FLAG_RXNE))

			// Check the USART_WordLength to decide whether we are going to receive 9bit of data in a frame or 8 bit
			if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
			{
				// We are going to receive 9bit data in a frame
				// Check are we using USART_ParityControl control or not
				if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
				{
					// No parity is used. so, all 9bits will be of user data
					// Read only first 9 bits. so, mask the DR with 0x01FF
					*((uint16_t*) pRxBuffer) = (pUSARTHandle->pUSARTx->DR  & (uint16_t)0x01FF);

					// Now increment the pRxBuffer two times
					pRxBuffer++;
					pRxBuffer++;
				}
				else
				{
					// Parity is used, so, 8bits will be of user data and 1 bit is parity
					 *pRxBuffer = (pUSARTHandle->pUSARTx->DR  & (uint8_t)0xFF);

					 //Increment the pRxBuffer
					 pRxBuffer++;
				}
			}
			else
			{
				// We are going to receive 8bit data in a frame
				// Check are we using USART_ParityControl control or not
				if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
				{
					// No parity is used , so all 8bits will be of user data
					// Read 8 bits from DR
					 *pRxBuffer = (uint8_t) (pUSARTHandle->pUSARTx->DR  & (uint8_t)0xFF);
				}

				else
				{
					// Parity is used, so , 7 bits will be of user data and 1 bit is parity
					// Read only 7 bits , hence mask the DR with 0X7F
					 *pRxBuffer = (uint8_t) (pUSARTHandle->pUSARTx->DR  & (uint8_t)0x7F);

				}

				// Increment the pRxBuffer
				pRxBuffer++;
			}
		}

}

uint8_t USART_SendDataInterruptBased(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len){

	uint8_t txstate = pUSARTHandle->TxBusyState;

	if(txstate != USART_BUSY_IN_TX)
	{
		pUSARTHandle->TxLen = Len;
		pUSARTHandle->pTxBuffer = pTxBuffer;
		pUSARTHandle->TxBusyState = USART_BUSY_IN_TX;

		// Enable interrupt for TXE
		pUSARTHandle->pUSARTx->CR1 |= (1 << USART_CR1_TXEIE);

		// Enable interrupt for TC
		pUSARTHandle->pUSARTx->CR1 |= (1 << USART_CR1_TCIE);
	}

	return txstate;

}
uint8_t USART_ReceiveDataInterruptBased(USART_Handle_t *pUSARTHandle, uint8_t *pRxBuffer, uint32_t Len){

	uint8_t rxstate = pUSARTHandle->RxBusyState;

	if(rxstate != USART_BUSY_IN_RX)
	{
		pUSARTHandle->RxLen = Len;
		pUSARTHandle->pRxBuffer = pRxBuffer;
		pUSARTHandle->RxBusyState = USART_BUSY_IN_RX;

		(void)pUSARTHandle->pUSARTx->DR;

		//Implement the code to enable interrupt for RXNE
		pUSARTHandle->pUSARTx->CR1 |= ( 1 << USART_CR1_RXNEIE);

	}

	return rxstate;
}


// IRQ Configuration and ISR Handling
void USART_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnOrDi){

	if(EnOrDi == ENABLE){

			if(IRQNumber < 32){

				// Set ISER0 Register in Processor
				*NVIC_ISER0 |= (1 << IRQNumber);
			}
			else if(IRQNumber >= 32 && IRQNumber < 64){

				// Set ISER1 Register in Processor
				*NVIC_ISER1 |= (1 << (IRQNumber % 32));
			}
			else if(IRQNumber >= 64 && IRQNumber < 96){

				// Set ISER2 Register in Processor
				*NVIC_ISER2 |= (1 << (IRQNumber % 64));
			}

		}
		else{

			if(IRQNumber < 32){

				// Set ICER0 Register in Processor
				*NVIC_ICER0 |= (1 << IRQNumber);
			}
			else if(IRQNumber >= 32 && IRQNumber < 64){

				// Set ICER1 Register in Processor
				*NVIC_ICER1 |= (1 << (IRQNumber % 32));
			}
			else if(IRQNumber >= 64 && IRQNumber < 96){

				// Set ICER2 Register in Processor
				*NVIC_ICER2 |= (1 << (IRQNumber % 64));
			}
		}
}

void USART_IRQPriorityConfig(uint8_t IRQNumber, uint8_t IRQPriority){

	uint8_t IprxRegNum 			= IRQNumber / 4;
	uint8_t IprxRegSectionNum 	= IRQNumber % 4;

	*(NVIC_IPR_BASEADDR + IprxRegNum) |= IRQPriority << ((8 * IprxRegSectionNum) + NUM_OF_NON_IMPLMNTD_LOW_ORD_BITS_IN_PRIOR_REG);
}


void USART_IRQHandling(USART_Handle_t *pUSARTHandle){

	uint32_t bit1state , bit2state, bit3state;

	uint16_t *pdata;

	// Check for TC flag
	// Check the state of TC bit in the SR
	bit1state = pUSARTHandle->pUSARTx->SR & (1 << USART_SR_TC);

	// Check the state of TCEIE bit
	bit2state = pUSARTHandle->pUSARTx->CR1 & (1 << USART_CR1_TCIE);

	if(bit1state && bit2state)
	{
		// This interrupt is because of TC
		// Close transmission and call application callback if TxLen is zero
		if ( pUSARTHandle->TxBusyState == USART_BUSY_IN_TX)
		{
			// Check the TxLen . If it is zero then close the data transmission
			if(! pUSARTHandle->TxLen )
			{
				// Clear the TC flag
				pUSARTHandle->pUSARTx->SR &= ~( 1 << USART_SR_TC);

				// Clear the TCIE control bit

				// Reset the application state
				pUSARTHandle->TxBusyState = USART_READY;

				// Reset Buffer address to NULL
				pUSARTHandle->pTxBuffer = NULL;

				// Reset the length to zero
				pUSARTHandle->TxLen = 0;

				// Call the application call back with event USART_EVENT_TX_CMPLT
				USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_TX_CMPLT);
			}
		}
	}

	// Check for TXE flag

	// Check the state of TXE bit in the SR
	bit1state = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_TXE);

	// Check the state of TXEIE bit in CR1
	bit2state = pUSARTHandle->pUSARTx->CR1 & ( 1 << USART_CR1_TXEIE);


	if(bit1state && bit2state )
	{
		// This interrupt is because of TXE
		if(pUSARTHandle->TxBusyState == USART_BUSY_IN_TX)
		{
			// Keep sending data until Txlen reaches to zero
			if(pUSARTHandle->TxLen > 0)
			{
				// Check the USART_WordLength item for 9BIT or 8BIT in a frame
				if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
				{
					// If 9BIT load the DR with 2bytes masking  the bits other than first 9 bits
					pdata = (uint16_t*) pUSARTHandle->pTxBuffer;
					pUSARTHandle->pUSARTx->DR = (*pdata & (uint16_t)0x01FF);

					// Check for USART_ParityControl
					if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
					{
						// No parity is used in this transfer , so 9bits of user data will be sent
						// Increment pTxBuffer twice
						pUSARTHandle->pTxBuffer++;
						pUSARTHandle->pTxBuffer++;
						pUSARTHandle->TxLen-=2;
					}
					else
					{
						// Parity bit is used in this transfer . so 8bits of user data will be sent
						// The 9th bit will be replaced by parity bit by the hardware
						pUSARTHandle->pTxBuffer++;
						pUSARTHandle->TxLen-=1;
					}
				}
				else
				{
					// This is 8bit data transfer
					pUSARTHandle->pUSARTx->DR = (*pUSARTHandle->pTxBuffer  & (uint8_t)0xFF);

					// Increment the buffer address
					pUSARTHandle->pTxBuffer++;
					pUSARTHandle->TxLen-=1;
				}

			}
			if (pUSARTHandle->TxLen == 0 )
			{
				// TxLen is zero
				// Clear the TXEIE bit (disable interrupt for TXE flag )
				pUSARTHandle->pUSARTx->CR1 &= ~( 1 << USART_CR1_TXEIE);
			}
		}
	}

	// Check for RXNE flag
	bit1state = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_RXNE);
	bit2state = pUSARTHandle->pUSARTx->CR1 & ( 1 << USART_CR1_RXNEIE);


	if(bit1state && bit2state )
	{
		// This interrupt is because of rxne
		if(pUSARTHandle->RxBusyState == USART_BUSY_IN_RX)
		{
			if(pUSARTHandle->RxLen > 0)
			{
				// Check the USART_WordLength to decide whether we are going to receive 9bit of data in a frame or 8 bit
				if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
				{
					// We are going to receive 9bit data in a frame

					// Now, check are we using USART_ParityControl control or not
					if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
					{
						// No parity is used , so all 9bits will be of user data

						// Read only first 9 bits so mask the DR with 0x01FF
						*((uint16_t*) pUSARTHandle->pRxBuffer) = (pUSARTHandle->pUSARTx->DR  & (uint16_t)0x01FF);

						// Now increment the pRxBuffer two times
						pUSARTHandle->pRxBuffer++;
						pUSARTHandle->pRxBuffer++;
						pUSARTHandle->RxLen-=2;
					}
					else
					{
						// Parity is used, so 8bits will be of user data and 1 bit is parity
						 *pUSARTHandle->pRxBuffer = (pUSARTHandle->pUSARTx->DR  & (uint8_t)0xFF);
						 pUSARTHandle->pRxBuffer++;
						 pUSARTHandle->RxLen-=1;
					}
				}
				else
				{
					// We are going to receive 8bit data in a frame
					// Now, check are we using USART_ParityControl control or not
					if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
					{
						// No parity is used , so all 8bits will be of user data
						// Read 8 bits from DR
						 *pUSARTHandle->pRxBuffer = (uint8_t) (pUSARTHandle->pUSARTx->DR  & (uint8_t)0xFF);

					}

					else
					{
						// Parity is used, so , 7 bits will be of user data and 1 bit is parity
						// Read only 7 bits , hence mask the DR with 0X7F
						 *pUSARTHandle->pRxBuffer = (uint8_t) (pUSARTHandle->pUSARTx->DR  & (uint8_t)0x7F);

					}

					// Now, increment the pRxBuffer
					pUSARTHandle->pRxBuffer++;
					 pUSARTHandle->RxLen-=1;
				}


			}// if of >0

			if(! pUSARTHandle->RxLen)
			{
				// Disable the RXNE
				pUSARTHandle->pUSARTx->CR1 &= ~( 1 << USART_CR1_RXNEIE );
				pUSARTHandle->RxBusyState = USART_READY;
				USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_RX_CMPLT);
			}
		}
	}


	// Check for CTS flag
	// Note : CTS feature is not applicable for UART4 and UART5

	// check the status of CTS bit in the SR
	bit1state = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_CTS);

	// check the state of CTSE bit in CR1
	bit2state = pUSARTHandle->pUSARTx->CR3 & ( 1 << USART_CR3_CTSE);

	// check the state of CTSIE bit in CR3 (This bit is not available for UART4 & UART5.)
	bit3state = pUSARTHandle->pUSARTx->CR3 & ( 1 << USART_CR3_CTSIE);


	if(bit1state && bit2state)
	{
		// Clear the CTS flag in SR
		pUSARTHandle->pUSARTx->SR &=  ~(1 << USART_SR_CTS);

		// This interrupt is because of CTS
		USART_ApplicationEventCallback(pUSARTHandle, USART_EVENT_CTS);
	}

	// Check for IDLE detection flag
	// Check the status of IDLE flag bit in the SR
	bit1state = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_IDLE);

	// Check the state of IDLEIE bit in CR1
	bit2state = pUSARTHandle->pUSARTx->CR1 & ( 1 << USART_CR1_IDLEIE);


	if(bit1state && bit2state)
	{
		// Clear the IDLE flag. Refer to the RM to understand the clear sequence
		bit1state = pUSARTHandle->pUSARTx->SR &= ~( 1 << USART_SR_IDLE);

		// This interrupt is because of idle
		USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_IDLE);
	}

	// Check for Overrun detection flag
	// Check the status of ORE flag  in the SR
	bit1state = pUSARTHandle->pUSARTx->SR & USART_SR_ORE;

	// Check the status of RXNEIE  bit in the CR1
	bit2state = pUSARTHandle->pUSARTx->CR1 & USART_CR1_RXNEIE;


	if(bit1state && bit2state)
	{
		// Need not to clear the ORE flag here, instead give an api for the application to clear the ORE flag .
		// This interrupt is because of Overrun error
		USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_ORE);
	}



	// Check for Error Flag
	// Noise Flag, Overrun error and Framing Error in multi buffer communication
	// We don't discuss multi buffer communication in this course. please refer to the RM
	// The blow code will get executed in only if multi buffer mode is used.
	bit2state =  pUSARTHandle->pUSARTx->CR3 & (1 << USART_CR3_EIE) ;
	if(bit2state)
	{
		bit1state = pUSARTHandle->pUSARTx->SR;
		if(bit1state & (1 << USART_SR_FE))
		{
			/*
				This bit is set by hardware when a de-synchronization, excessive noise or a break character
				is detected. It is cleared by a software sequence (an read to the USART_SR register
				followed by a read to the USART_DR register).
			*/
			USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_FE);
		}

		if(bit1state & (1 << USART_SR_NE) )
		{
			/*
				This bit is set by hardware when noise is detected on a received frame. It is cleared by a
				software sequence (an read to the USART_SR register followed by a read to the
				USART_DR register).
			*/
			USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_NE);
		}

		if(bit1state & (1 << USART_SR_ORE) )
		{
			USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_ORE);
		}
	}
}


// Other USART Peripheral APIs
uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx, uint32_t FlagName){

	if(pUSARTx->SR & FlagName)
		return FLAG_SET;
	return FLAG_UNSET;
}

void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t EnOrDi){

	if(EnOrDi == ENABLE)
		pUSARTx->CR1 |= (1 << USART_CR1_UE);

	pUSARTx->CR1 &= ~(1 << USART_CR1_UE);
}
//void USART_SSIConfig(USART_RegDef_t *pUSARTx, uint8_t EnOrDi);
//void USART_SSOEConfig(USART_RegDef_t *pUSARTx, uint8_t EnOrDi);

void USART_ClearFlag(USART_RegDef_t *pUSARTx, uint16_t StatusFlagName){

	pUSARTx->SR &= ~(StatusFlagName);
}

//void USART_CloseTransmission(USART_Handle_t *pHandle);
//void USART_CloseReception(USART_Handle_t *pHandle);

// Application callback
void USART_ApplicationEventCallback(USART_Handle_t *pUSARTHandle, uint8_t ApplicationEvent);
